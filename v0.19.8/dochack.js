/* Generated by the Nim Compiler v0.20.0 */
/*   (c) 2019 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI43032 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI204074 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI46662 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI206577 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI84448 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI84444 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI84440 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI84436 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI84432 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI84428 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI84424 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI84420 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI84416 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI84412 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI84408 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI84404 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI84400 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI84396 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI84392 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI84388 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI84384 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI84380 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI84376 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI84372 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI84205 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI84283 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI84281 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI84227 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI84565 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI84563 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI84561 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI84231 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI84229 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI86305 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI46650 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI46658 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI43006 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI63156 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI46608 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI46714 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI43016 = {size: 0,kind: 40,base: null,node: null,finalizer: null};
var NTI43040 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI43042 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI46708 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI46626 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI46628 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI46642 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI46646 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI46646 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI46646.node = NNI46646;
var NNI46642 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI46642.node = NNI46642;
var NNI46628 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI46628.node = NNI46628;
NTI46708.base = NTI46626;
NTI46714.base = NTI46626;
var NNI46626 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI46708, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI43042, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI43040, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI43040, name: "trace", sons: null}, 
{kind: 1, offset: "raiseId", len: 0, typ: NTI43016, name: "raiseId", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI46714, name: "up", sons: null}]};
NTI46626.node = NNI46626;
var NNI46608 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI46608.node = NNI46608;
NTI46626.base = NTI46608;
NTI46628.base = NTI46626;
NTI46642.base = NTI46628;
NTI46646.base = NTI46642;
var NNI63156 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI43042, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI43006, name: "Field1", sons: null}]};
NTI63156.node = NNI63156;
var NNI46658 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI46658.node = NNI46658;
NTI46658.base = NTI46628;
var NNI46650 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI46650.node = NNI46650;
NTI46650.base = NTI46628;
NTI84561.base = NTI84229;
NTI84563.base = NTI84229;
NTI84565.base = NTI84229;
var NNI84227 = {kind: 2, offset: 0, typ: null, name: null, len: 12, sons: {"1": {kind: 1, offset: 1, typ: NTI84227, name: "ElementNode", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI84227, name: "AttributeNode", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI84227, name: "TextNode", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI84227, name: "CDATANode", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI84227, name: "EntityRefNode", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI84227, name: "EntityNode", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI84227, name: "ProcessingInstructionNode", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI84227, name: "CommentNode", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI84227, name: "DocumentNode", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI84227, name: "DocumentTypeNode", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI84227, name: "DocumentFragmentNode", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI84227, name: "NotationNode", len: 0, sons: null}}};
NTI84227.node = NNI84227;
var NNI84283 = {kind: 2, len: 91, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "background", len: 0, typ: NTI43042, name: "background", sons: null}, 
{kind: 1, offset: "backgroundAttachment", len: 0, typ: NTI43042, name: "backgroundAttachment", sons: null}, 
{kind: 1, offset: "backgroundColor", len: 0, typ: NTI43042, name: "backgroundColor", sons: null}, 
{kind: 1, offset: "backgroundImage", len: 0, typ: NTI43042, name: "backgroundImage", sons: null}, 
{kind: 1, offset: "backgroundPosition", len: 0, typ: NTI43042, name: "backgroundPosition", sons: null}, 
{kind: 1, offset: "backgroundRepeat", len: 0, typ: NTI43042, name: "backgroundRepeat", sons: null}, 
{kind: 1, offset: "border", len: 0, typ: NTI43042, name: "border", sons: null}, 
{kind: 1, offset: "borderBottom", len: 0, typ: NTI43042, name: "borderBottom", sons: null}, 
{kind: 1, offset: "borderBottomColor", len: 0, typ: NTI43042, name: "borderBottomColor", sons: null}, 
{kind: 1, offset: "borderBottomStyle", len: 0, typ: NTI43042, name: "borderBottomStyle", sons: null}, 
{kind: 1, offset: "borderBottomWidth", len: 0, typ: NTI43042, name: "borderBottomWidth", sons: null}, 
{kind: 1, offset: "borderColor", len: 0, typ: NTI43042, name: "borderColor", sons: null}, 
{kind: 1, offset: "borderLeft", len: 0, typ: NTI43042, name: "borderLeft", sons: null}, 
{kind: 1, offset: "borderLeftColor", len: 0, typ: NTI43042, name: "borderLeftColor", sons: null}, 
{kind: 1, offset: "borderLeftStyle", len: 0, typ: NTI43042, name: "borderLeftStyle", sons: null}, 
{kind: 1, offset: "borderLeftWidth", len: 0, typ: NTI43042, name: "borderLeftWidth", sons: null}, 
{kind: 1, offset: "borderRight", len: 0, typ: NTI43042, name: "borderRight", sons: null}, 
{kind: 1, offset: "borderRightColor", len: 0, typ: NTI43042, name: "borderRightColor", sons: null}, 
{kind: 1, offset: "borderRightStyle", len: 0, typ: NTI43042, name: "borderRightStyle", sons: null}, 
{kind: 1, offset: "borderRightWidth", len: 0, typ: NTI43042, name: "borderRightWidth", sons: null}, 
{kind: 1, offset: "borderStyle", len: 0, typ: NTI43042, name: "borderStyle", sons: null}, 
{kind: 1, offset: "borderTop", len: 0, typ: NTI43042, name: "borderTop", sons: null}, 
{kind: 1, offset: "borderTopColor", len: 0, typ: NTI43042, name: "borderTopColor", sons: null}, 
{kind: 1, offset: "borderTopStyle", len: 0, typ: NTI43042, name: "borderTopStyle", sons: null}, 
{kind: 1, offset: "borderTopWidth", len: 0, typ: NTI43042, name: "borderTopWidth", sons: null}, 
{kind: 1, offset: "borderWidth", len: 0, typ: NTI43042, name: "borderWidth", sons: null}, 
{kind: 1, offset: "bottom", len: 0, typ: NTI43042, name: "bottom", sons: null}, 
{kind: 1, offset: "captionSide", len: 0, typ: NTI43042, name: "captionSide", sons: null}, 
{kind: 1, offset: "clear", len: 0, typ: NTI43042, name: "clear", sons: null}, 
{kind: 1, offset: "clip", len: 0, typ: NTI43042, name: "clip", sons: null}, 
{kind: 1, offset: "color", len: 0, typ: NTI43042, name: "color", sons: null}, 
{kind: 1, offset: "cursor", len: 0, typ: NTI43042, name: "cursor", sons: null}, 
{kind: 1, offset: "direction", len: 0, typ: NTI43042, name: "direction", sons: null}, 
{kind: 1, offset: "display", len: 0, typ: NTI43042, name: "display", sons: null}, 
{kind: 1, offset: "emptyCells", len: 0, typ: NTI43042, name: "emptyCells", sons: null}, 
{kind: 1, offset: "cssFloat", len: 0, typ: NTI43042, name: "cssFloat", sons: null}, 
{kind: 1, offset: "font", len: 0, typ: NTI43042, name: "font", sons: null}, 
{kind: 1, offset: "fontFamily", len: 0, typ: NTI43042, name: "fontFamily", sons: null}, 
{kind: 1, offset: "fontSize", len: 0, typ: NTI43042, name: "fontSize", sons: null}, 
{kind: 1, offset: "fontStretch", len: 0, typ: NTI43042, name: "fontStretch", sons: null}, 
{kind: 1, offset: "fontStyle", len: 0, typ: NTI43042, name: "fontStyle", sons: null}, 
{kind: 1, offset: "fontVariant", len: 0, typ: NTI43042, name: "fontVariant", sons: null}, 
{kind: 1, offset: "fontWeight", len: 0, typ: NTI43042, name: "fontWeight", sons: null}, 
{kind: 1, offset: "height", len: 0, typ: NTI43042, name: "height", sons: null}, 
{kind: 1, offset: "left", len: 0, typ: NTI43042, name: "left", sons: null}, 
{kind: 1, offset: "letterSpacing", len: 0, typ: NTI43042, name: "letterSpacing", sons: null}, 
{kind: 1, offset: "lineHeight", len: 0, typ: NTI43042, name: "lineHeight", sons: null}, 
{kind: 1, offset: "listStyle", len: 0, typ: NTI43042, name: "listStyle", sons: null}, 
{kind: 1, offset: "listStyleImage", len: 0, typ: NTI43042, name: "listStyleImage", sons: null}, 
{kind: 1, offset: "listStylePosition", len: 0, typ: NTI43042, name: "listStylePosition", sons: null}, 
{kind: 1, offset: "listStyleType", len: 0, typ: NTI43042, name: "listStyleType", sons: null}, 
{kind: 1, offset: "margin", len: 0, typ: NTI43042, name: "margin", sons: null}, 
{kind: 1, offset: "marginBottom", len: 0, typ: NTI43042, name: "marginBottom", sons: null}, 
{kind: 1, offset: "marginLeft", len: 0, typ: NTI43042, name: "marginLeft", sons: null}, 
{kind: 1, offset: "marginRight", len: 0, typ: NTI43042, name: "marginRight", sons: null}, 
{kind: 1, offset: "marginTop", len: 0, typ: NTI43042, name: "marginTop", sons: null}, 
{kind: 1, offset: "maxHeight", len: 0, typ: NTI43042, name: "maxHeight", sons: null}, 
{kind: 1, offset: "maxWidth", len: 0, typ: NTI43042, name: "maxWidth", sons: null}, 
{kind: 1, offset: "minHeight", len: 0, typ: NTI43042, name: "minHeight", sons: null}, 
{kind: 1, offset: "minWidth", len: 0, typ: NTI43042, name: "minWidth", sons: null}, 
{kind: 1, offset: "overflow", len: 0, typ: NTI43042, name: "overflow", sons: null}, 
{kind: 1, offset: "padding", len: 0, typ: NTI43042, name: "padding", sons: null}, 
{kind: 1, offset: "paddingBottom", len: 0, typ: NTI43042, name: "paddingBottom", sons: null}, 
{kind: 1, offset: "paddingLeft", len: 0, typ: NTI43042, name: "paddingLeft", sons: null}, 
{kind: 1, offset: "paddingRight", len: 0, typ: NTI43042, name: "paddingRight", sons: null}, 
{kind: 1, offset: "paddingTop", len: 0, typ: NTI43042, name: "paddingTop", sons: null}, 
{kind: 1, offset: "pageBreakAfter", len: 0, typ: NTI43042, name: "pageBreakAfter", sons: null}, 
{kind: 1, offset: "pageBreakBefore", len: 0, typ: NTI43042, name: "pageBreakBefore", sons: null}, 
{kind: 1, offset: "pointerEvents", len: 0, typ: NTI43042, name: "pointerEvents", sons: null}, 
{kind: 1, offset: "position", len: 0, typ: NTI43042, name: "position", sons: null}, 
{kind: 1, offset: "right", len: 0, typ: NTI43042, name: "right", sons: null}, 
{kind: 1, offset: "scrollbar3dLightColor", len: 0, typ: NTI43042, name: "scrollbar3dLightColor", sons: null}, 
{kind: 1, offset: "scrollbarArrowColor", len: 0, typ: NTI43042, name: "scrollbarArrowColor", sons: null}, 
{kind: 1, offset: "scrollbarBaseColor", len: 0, typ: NTI43042, name: "scrollbarBaseColor", sons: null}, 
{kind: 1, offset: "scrollbarDarkshadowColor", len: 0, typ: NTI43042, name: "scrollbarDarkshadowColor", sons: null}, 
{kind: 1, offset: "scrollbarFaceColor", len: 0, typ: NTI43042, name: "scrollbarFaceColor", sons: null}, 
{kind: 1, offset: "scrollbarHighlightColor", len: 0, typ: NTI43042, name: "scrollbarHighlightColor", sons: null}, 
{kind: 1, offset: "scrollbarShadowColor", len: 0, typ: NTI43042, name: "scrollbarShadowColor", sons: null}, 
{kind: 1, offset: "scrollbarTrackColor", len: 0, typ: NTI43042, name: "scrollbarTrackColor", sons: null}, 
{kind: 1, offset: "tableLayout", len: 0, typ: NTI43042, name: "tableLayout", sons: null}, 
{kind: 1, offset: "textAlign", len: 0, typ: NTI43042, name: "textAlign", sons: null}, 
{kind: 1, offset: "textDecoration", len: 0, typ: NTI43042, name: "textDecoration", sons: null}, 
{kind: 1, offset: "textIndent", len: 0, typ: NTI43042, name: "textIndent", sons: null}, 
{kind: 1, offset: "textTransform", len: 0, typ: NTI43042, name: "textTransform", sons: null}, 
{kind: 1, offset: "transform", len: 0, typ: NTI43042, name: "transform", sons: null}, 
{kind: 1, offset: "top", len: 0, typ: NTI43042, name: "top", sons: null}, 
{kind: 1, offset: "verticalAlign", len: 0, typ: NTI43042, name: "verticalAlign", sons: null}, 
{kind: 1, offset: "visibility", len: 0, typ: NTI43042, name: "visibility", sons: null}, 
{kind: 1, offset: "width", len: 0, typ: NTI43042, name: "width", sons: null}, 
{kind: 1, offset: "wordSpacing", len: 0, typ: NTI43042, name: "wordSpacing", sons: null}, 
{kind: 1, offset: "zIndex", len: 0, typ: NTI43006, name: "zIndex", sons: null}]};
NTI84283.node = NNI84283;
NTI84283.base = NTI46608;
NTI84281.base = NTI84283;
var NNI84231 = {kind: 2, len: 14, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "attributes", len: 0, typ: NTI84561, name: "attributes", sons: null}, 
{kind: 1, offset: "childNodes", len: 0, typ: NTI84563, name: "childNodes", sons: null}, 
{kind: 1, offset: "children", len: 0, typ: NTI84565, name: "children", sons: null}, 
{kind: 1, offset: "data", len: 0, typ: NTI43042, name: "data", sons: null}, 
{kind: 1, offset: "firstChild", len: 0, typ: NTI84229, name: "firstChild", sons: null}, 
{kind: 1, offset: "lastChild", len: 0, typ: NTI84229, name: "lastChild", sons: null}, 
{kind: 1, offset: "nextSibling", len: 0, typ: NTI84229, name: "nextSibling", sons: null}, 
{kind: 1, offset: "nodeName", len: 0, typ: NTI43042, name: "nodeName", sons: null}, 
{kind: 1, offset: "nodeType", len: 0, typ: NTI84227, name: "nodeType", sons: null}, 
{kind: 1, offset: "nodeValue", len: 0, typ: NTI43042, name: "nodeValue", sons: null}, 
{kind: 1, offset: "parentNode", len: 0, typ: NTI84229, name: "parentNode", sons: null}, 
{kind: 1, offset: "previousSibling", len: 0, typ: NTI84229, name: "previousSibling", sons: null}, 
{kind: 1, offset: "innerHTML", len: 0, typ: NTI43042, name: "innerHTML", sons: null}, 
{kind: 1, offset: "style", len: 0, typ: NTI84281, name: "style", sons: null}]};
NTI84231.node = NNI84231;
var NNI84205 = {kind: 2, len: 20, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "onabort", len: 0, typ: NTI84372, name: "onabort", sons: null}, 
{kind: 1, offset: "onblur", len: 0, typ: NTI84376, name: "onblur", sons: null}, 
{kind: 1, offset: "onchange", len: 0, typ: NTI84380, name: "onchange", sons: null}, 
{kind: 1, offset: "onclick", len: 0, typ: NTI84384, name: "onclick", sons: null}, 
{kind: 1, offset: "ondblclick", len: 0, typ: NTI84388, name: "ondblclick", sons: null}, 
{kind: 1, offset: "onerror", len: 0, typ: NTI84392, name: "onerror", sons: null}, 
{kind: 1, offset: "onfocus", len: 0, typ: NTI84396, name: "onfocus", sons: null}, 
{kind: 1, offset: "onkeydown", len: 0, typ: NTI84400, name: "onkeydown", sons: null}, 
{kind: 1, offset: "onkeypress", len: 0, typ: NTI84404, name: "onkeypress", sons: null}, 
{kind: 1, offset: "onkeyup", len: 0, typ: NTI84408, name: "onkeyup", sons: null}, 
{kind: 1, offset: "onload", len: 0, typ: NTI84412, name: "onload", sons: null}, 
{kind: 1, offset: "onmousedown", len: 0, typ: NTI84416, name: "onmousedown", sons: null}, 
{kind: 1, offset: "onmousemove", len: 0, typ: NTI84420, name: "onmousemove", sons: null}, 
{kind: 1, offset: "onmouseout", len: 0, typ: NTI84424, name: "onmouseout", sons: null}, 
{kind: 1, offset: "onmouseover", len: 0, typ: NTI84428, name: "onmouseover", sons: null}, 
{kind: 1, offset: "onmouseup", len: 0, typ: NTI84432, name: "onmouseup", sons: null}, 
{kind: 1, offset: "onreset", len: 0, typ: NTI84436, name: "onreset", sons: null}, 
{kind: 1, offset: "onselect", len: 0, typ: NTI84440, name: "onselect", sons: null}, 
{kind: 1, offset: "onsubmit", len: 0, typ: NTI84444, name: "onsubmit", sons: null}, 
{kind: 1, offset: "onunload", len: 0, typ: NTI84448, name: "onunload", sons: null}]};
NTI84205.node = NNI84205;
NTI84205.base = NTI46608;
NTI84231.base = NTI84205;
NTI84229.base = NTI84231;
NTI86305.base = NTI84229;
NTI206577.base = NTI43042;
var NNI46662 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI46662.node = NNI46662;
NTI46662.base = NTI46628;
var NNI204074 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI43006, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI43032, name: "Field1", sons: null}]};
NTI204074.node = NNI204074;

function makeNimstrLit(c_65258) {
		  var ln = c_65258.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_65258.charCodeAt(i);
  }
  return result;
  

	
}

function setConstr() {
		    var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_66227, src_66228, ti_66229) {
	var result_66419 = null;

		switch (ti_66229.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(is_fat_pointer_66201(ti_66229))) {
			result_66419 = src_66228;
			}
			else {
				result_66419 = [src_66228[0], src_66228[1]];
			}
			
			break;
		case 19:
			      if (dest_66227 === null || dest_66227 === undefined) {
        dest_66227 = {};
      }
      else {
        for (var key in dest_66227) { delete dest_66227[key]; }
      }
      for (var key in src_66228) { dest_66227[key] = src_66228[key]; }
      result_66419 = dest_66227;
    
			break;
		case 18:
		case 17:
			if (!((ti_66229.base == null))) {
			result_66419 = nimCopy(dest_66227, src_66228, ti_66229.base);
			}
			else {
			if ((ti_66229.kind == 17)) {
			result_66419 = (dest_66227 === null || dest_66227 === undefined) ? {m_type: ti_66229} : dest_66227;
			}
			else {
				result_66419 = (dest_66227 === null || dest_66227 === undefined) ? {} : dest_66227;
			}
			}
			nimCopyAux(result_66419, src_66228, ti_66229.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_66228 === null) {
        result_66419 = null;
      }
      else {
        if (dest_66227 === null || dest_66227 === undefined) {
          dest_66227 = new Array(src_66228.length);
        }
        else {
          dest_66227.length = src_66228.length;
        }
        result_66419 = dest_66227;
        for (var i = 0; i < src_66228.length; ++i) {
          result_66419[i] = nimCopy(result_66419[i], src_66228[i], ti_66229.base);
        }
      }
    
			break;
		case 28:
			      if (src_66228 !== null) {
        result_66419 = src_66228.slice(0);
      }
    
			break;
		default: 
			result_66419 = src_66228;
			break;
		}

	return result_66419;

}

function arrayConstr(len_66486, value_66487, typ_66488) {
		    var result = new Array(len_66486);
    for (var i = 0; i < len_66486; ++i) result[i] = nimCopy(null, value_66487, typ_66488);
    return result;
  

	
}

function cstrToNimstr(c_65275) {
		  var ln = c_65275.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_65275.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_65275.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

	
}

function toJSStr(s_65292) {
		  if (s_65292 === null) return "";
  var len = s_65292.length;
  var asciiPart = new Array(len);
  var fcc = String.fromCharCode;
  var nonAsciiPart = null;
  var nonAsciiOffset = 0;
  for (var i = 0; i < len; ++i) {
    if (nonAsciiPart !== null) {
      var offset = (i - nonAsciiOffset) * 2;
      var code = s_65292[i].toString(16);
      if (code.length == 1) {
        code = "0"+code;
      }
      nonAsciiPart[offset] = "%";
      nonAsciiPart[offset + 1] = code;
    }
    else if (s_65292[i] < 128)
      asciiPart[i] = fcc(s_65292[i]);
    else {
      asciiPart.length = i;
      nonAsciiOffset = i;
      nonAsciiPart = new Array((len - i) * 2);
      --i;
    }
  }
  asciiPart = asciiPart.join("");
  return (nonAsciiPart === null) ?
      asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  

	
}

function raiseException(e_63618, ename_63619) {
		e_63618.name = ename_63619;
		if ((excHandler == 0)) {
		unhandledException(e_63618);
		}
		
		e_63618.trace = nimCopy(null, raw_write_stack_trace_63468(), NTI43040);
		throw e_63618;

	
}

function addInt(a_65603, b_65604) {
		    var result = a_65603 + b_65604;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}

function chckIndx(i_66505, a_66506, b_66507) {
			var Tmp1;

	var result_66508 = 0;

	BeforeRet: do {
			if (!(a_66506 <= i_66505)) Tmp1 = false; else {				Tmp1 = (i_66505 <= b_66507);			}		if (Tmp1) {
		result_66508 = i_66505;
		break BeforeRet;
		}
		else {
		raiseIndexError(i_66505, a_66506, b_66507);
		}
		
	} while (false);

	return result_66508;

}

function subInt(a_65621, b_65622) {
		    var result = a_65621 - b_65622;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}
var ConstSet2 = setConstr([65, 90]);

function chckRange(i_66524, a_66525, b_66526) {
			var Tmp1;

	var result_66527 = 0;

	BeforeRet: do {
			if (!(a_66525 <= i_66524)) Tmp1 = false; else {				Tmp1 = (i_66524 <= b_66526);			}		if (Tmp1) {
		result_66527 = i_66524;
		break BeforeRet;
		}
		else {
		raiseRangeError();
		}
		
	} while (false);

	return result_66527;

}
var ConstSet3 = setConstr(95, 32, 46);
var ConstSet4 = setConstr(95, 32, 46);

function mulInt(a_65639, b_65640) {
		    var result = a_65639 * b_65640;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}
var ConstSet5 = setConstr([97, 122]);
var ConstSet6 = setConstr([65, 90], [97, 122]);
var ConstSet7 = setConstr([97, 122]);
var ConstSet8 = setConstr([65, 90]);

function nimMax(a_65958, b_65959) {
		var Tmp1;

	var result_65960 = 0;

	BeforeRet: do {
		if ((b_65959 <= a_65958)) {
		Tmp1 = a_65958;
		}
		else {
		Tmp1 = b_65959;
		}
		
		result_65960 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_65960;

}

function nimMin(a_65940, b_65941) {
		var Tmp1;

	var result_65942 = 0;

	BeforeRet: do {
		if ((a_65940 <= b_65941)) {
		Tmp1 = a_65940;
		}
		else {
		Tmp1 = b_65941;
		}
		
		result_65942 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_65942;

}
var nim_program_result = 0;
var global_raise_hook_60618 = [null];
var local_raise_hook_60623 = [null];
var out_of_mem_hook_60626 = [null];
  if (!Math.trunc) {
    Math.trunc = function(v) {
      v = +v;
      if (!isFinite(v)) return v;

      return (v - v % 1)   ||   (v < 0 ? -0 : v === 0 ? v : 0);
    };
  }
var alternative_206315 = [null];

function is_fat_pointer_66201(ti_66203) {
	var result_66204 = false;

	BeforeRet: do {
		result_66204 = !((ConstSet1[ti_66203.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_66204;

}

function nimCopyAux(dest_66232, src_66233, n_66235) {
		switch (n_66235.kind) {
		case 0:
			break;
		case 1:
			      dest_66232[n_66235.offset] = nimCopy(dest_66232[n_66235.offset], src_66233[n_66235.offset], n_66235.typ);
    
			break;
		case 2:
			    for (var i = 0; i < n_66235.sons.length; i++) {
      nimCopyAux(dest_66232, src_66233, n_66235.sons[i]);
    }
    
			break;
		case 3:
			      dest_66232[n_66235.offset] = nimCopy(dest_66232[n_66235.offset], src_66233[n_66235.offset], n_66235.typ);
      for (var i = 0; i < n_66235.sons.length; ++i) {
        nimCopyAux(dest_66232, src_66233, n_66235.sons[i][1]);
      }
    
			break;
		}

	
}

function add_60638(x_60641, x_60641_Idx, y_60642) {
		      if (x_60641[x_60641_Idx] === null) { x_60641[x_60641_Idx] = []; }
      var off = x_60641[x_60641_Idx].length;
      x_60641[x_60641_Idx].length += y_60642.length;
      for (var i = 0; i < y_60642.length; ++i) {
        x_60641[x_60641_Idx][off+i] = y_60642.charCodeAt(i);
      }
    

	
}

function aux_write_stack_trace_63151(f_63153) {
					var Tmp3;

	var result_63154 = [null];

		var it_63162 = f_63153;
		var i_63164 = 0;
		var total_63166 = 0;
		var temp_frames_63173 = arrayConstr(64, {Field0: null, Field1: 0}, NTI63156);
		L1: do {
				L2: while (true) {
					if (!!((it_63162 == null))) Tmp3 = false; else {						Tmp3 = (i_63164 <= 63);					}				if (!Tmp3) break L2;
					temp_frames_63173[i_63164].Field0 = it_63162.procname;
					temp_frames_63173[i_63164].Field1 = it_63162.line;
					i_63164 += 1;
					total_63166 += 1;
					it_63162 = it_63162.prev;
				}
		} while(false);
		L4: do {
				L5: while (true) {
				if (!!((it_63162 == null))) break L5;
					total_63166 += 1;
					it_63162 = it_63162.prev;
				}
		} while(false);
		result_63154[0] = nimCopy(null, [], NTI43040);
		if (!((total_63166 == i_63164))) {
		if (result_63154[0] != null) { result_63154[0] = (result_63154[0]).concat(makeNimstrLit("(")); } else { result_63154[0] = makeNimstrLit("("); };
		if (result_63154[0] != null) { result_63154[0] = (result_63154[0]).concat(cstrToNimstr(((total_63166 - i_63164))+"")); } else { result_63154[0] = cstrToNimstr(((total_63166 - i_63164))+"").slice(); };
		if (result_63154[0] != null) { result_63154[0] = (result_63154[0]).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_63154[0] = makeNimstrLit(" calls omitted) ...\x0A"); };
		}
		
		L6: do {
			var j_63421 = 0;
			var colontmp__206456 = 0;
			colontmp__206456 = (i_63164 - 1);
			var res_206461 = colontmp__206456;
			L7: do {
					L8: while (true) {
					if (!(0 <= res_206461)) break L8;
						j_63421 = res_206461;
						add_60638(result_63154, 0, temp_frames_63173[j_63421].Field0);
						if ((0 < temp_frames_63173[j_63421].Field1)) {
						if (result_63154[0] != null) { result_63154[0] = (result_63154[0]).concat(makeNimstrLit(", line: ")); } else { result_63154[0] = makeNimstrLit(", line: "); };
						if (result_63154[0] != null) { result_63154[0] = (result_63154[0]).concat(cstrToNimstr((temp_frames_63173[j_63421].Field1)+"")); } else { result_63154[0] = cstrToNimstr((temp_frames_63173[j_63421].Field1)+"").slice(); };
						}
						
						if (result_63154[0] != null) { result_63154[0] = (result_63154[0]).concat(makeNimstrLit("\x0A")); } else { result_63154[0] = makeNimstrLit("\x0A"); };
						res_206461 -= 1;
					}
			} while(false);
		} while(false);

	return result_63154[0];

}

function raw_write_stack_trace_63468() {
	var result_63470 = null;

		if (!((framePtr == null))) {
		result_63470 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A") || []).concat(aux_write_stack_trace_63151(framePtr) || []), NTI43040);
		}
		else {
			result_63470 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI43040);
		}
		

	return result_63470;

}

function unhandledException(e_63529) {
		var buf_63530 = [[]];
		if (!(((e_63529.message != null ? e_63529.message.length : 0) == 0))) {
		if (buf_63530[0] != null) { buf_63530[0] = (buf_63530[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_63530[0] = makeNimstrLit("Error: unhandled exception: "); };
		if (buf_63530[0] != null) { buf_63530[0] = (buf_63530[0]).concat(e_63529.message); } else { buf_63530[0] = e_63529.message.slice(); };
		}
		else {
		if (buf_63530[0] != null) { buf_63530[0] = (buf_63530[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_63530[0] = makeNimstrLit("Error: unhandled exception"); };
		}
		
		if (buf_63530[0] != null) { buf_63530[0] = (buf_63530[0]).concat(makeNimstrLit(" [")); } else { buf_63530[0] = makeNimstrLit(" ["); };
		add_60638(buf_63530, 0, e_63529.name);
		if (buf_63530[0] != null) { buf_63530[0] = (buf_63530[0]).concat(makeNimstrLit("]\x0A")); } else { buf_63530[0] = makeNimstrLit("]\x0A"); };
		if (buf_63530[0] != null) { buf_63530[0] = (buf_63530[0]).concat(raw_write_stack_trace_63468()); } else { buf_63530[0] = raw_write_stack_trace_63468().slice(); };
		var cbuf_63601 = toJSStr(buf_63530[0]);
		framePtr = null;
		  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_63601);
  }
  else {
    throw cbuf_63601;
  }
  

	
}

function raiseOverflow() {
		var e_64046 = null;
		e_64046 = {m_type: NTI46646, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		e_64046.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI43040);
		e_64046.parent = null;
		raiseException(e_64046, "OverflowError");

	
}

function is_whitespace_205654(text_205656) {
		     return !/[^\s]/.test(text_205656);
  

	
}

function is_whitespace_205671(x_205673) {
		var Tmp1;
		var Tmp2;

	var result_205674 = false;

	var F={procname:"dochack.isWhitespace",prev:framePtr,filename:"C:\\Users\\rumpf\\projects\\nim\\tools\\dochack\\dochack.nim",line:0};
	framePtr = F;
		F.line = 134;
		if (!(x_205673.nodeName == "#text")) Tmp2 = false; else {			Tmp2 = is_whitespace_205654(x_205673.textContent);		}		if (Tmp2) Tmp1 = true; else {			Tmp1 = (x_205673.nodeName == "#comment");		}		result_205674 = Tmp1;
	framePtr = F.prev;

	return result_205674;

}

function raiseIndexError(i_64643, a_64644, b_64645) {
		var e_64802 = null;
		e_64802 = {m_type: NTI46658, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		e_64802.message = nimCopy(null, (makeNimstrLit("index ") || []).concat(cstrToNimstr((i_64643)+"") || [],makeNimstrLit(" not in ") || [],cstrToNimstr((a_64644)+"") || [],makeNimstrLit(" .. ") || [],cstrToNimstr((b_64645)+"") || []), NTI43040);
		e_64802.parent = null;
		raiseException(e_64802, "IndexError");

	
}

function to_toc_205688(x_205690, father_205691) {
								var Tmp5;
						var Tmp6;
						var Tmp7;
						var Tmp8;
			var Tmp15;

	var F={procname:"dochack.toToc",prev:framePtr,filename:"C:\\Users\\rumpf\\projects\\nim\\tools\\dochack\\dochack.nim",line:0};
	framePtr = F;
		if ((x_205690.nodeName == "UL")) {
		F.line = 139;
		var f_205710 = {heading: null, kids: [], sortId: (father_205691.kids != null ? father_205691.kids.length : 0), doSort: false};
		F.line = 140;
		var i_205712 = 0;
		L1: do {
			F.line = 141;
				L2: while (true) {
				if (!(i_205712 < x_205690.childNodes.length)) break L2;
					F.line = 142;
					var nxt_205713 = addInt(i_205712, 1);
					L3: do {
						F.line = 143;
							L4: while (true) {
								if (!(nxt_205713 < x_205690.childNodes.length)) Tmp5 = false; else {									Tmp5 = is_whitespace_205671(x_205690.childNodes[nxt_205713]);								}							if (!Tmp5) break L4;
								F.line = 144;
								nxt_205713 = addInt(nxt_205713, 1);
							}
					} while(false);
						if (!(nxt_205713 < x_205690.childNodes.length)) Tmp8 = false; else {							Tmp8 = (x_205690.childNodes[i_205712].nodeName == "LI");						}						if (!Tmp8) Tmp7 = false; else {							Tmp7 = (x_205690.childNodes[i_205712].childNodes.length == 1);						}						if (!Tmp7) Tmp6 = false; else {							Tmp6 = (x_205690.childNodes[nxt_205713].nodeName == "UL");						}					if (Tmp6) {
					F.line = 147;
					var e_205738 = {heading: x_205690.childNodes[i_205712].childNodes[0], kids: [], sortId: (f_205710.kids != null ? f_205710.kids.length : 0), doSort: false};
					F.line = 148;
					var it_205739 = x_205690.childNodes[nxt_205713];
					L9: do {
						F.line = 149;
						var j_205747 = 0;
						F.line = 2647;
						var colontmp__206432 = 0;
						F.line = 149;
						colontmp__206432 = it_205739.childNodes.length;
						F.line = 2648;
						var i_206433 = 0;
						L10: do {
							F.line = 2649;
								L11: while (true) {
								if (!(i_206433 < colontmp__206432)) break L11;
									F.line = 149;
									j_205747 = i_206433;
									F.line = 150;
									to_toc_205688(it_205739.childNodes[j_205747], e_205738);
									F.line = 2651;
									i_206433 = addInt(i_206433, 1);
								}
						} while(false);
					} while(false);
					F.line = 151;
					if (f_205710.kids != null) { f_205710.kids.push(e_205738); } else { f_205710.kids = [e_205738]; };
					F.line = 152;
					i_205712 = addInt(nxt_205713, 1);
					}
					else {
						F.line = 154;
						to_toc_205688(x_205690.childNodes[i_205712], f_205710);
						F.line = 155;
						i_205712 = addInt(i_205712, 1);
					}
					
				}
		} while(false);
		F.line = 156;
		if (father_205691.kids != null) { father_205691.kids.push(f_205710); } else { father_205691.kids = [f_205710]; };
		}
		else {
		if (is_whitespace_205671(x_205690)) {
		}
		else {
		if ((x_205690.nodeName == "LI")) {
		F.line = 160;
		var idx_205782 = [];
		L12: do {
			F.line = 161;
			var i_205790 = 0;
			F.line = 2647;
			var colontmp__206437 = 0;
			F.line = 161;
			colontmp__206437 = x_205690.childNodes.length;
			F.line = 2648;
			var i_206438 = 0;
			L13: do {
				F.line = 2649;
					L14: while (true) {
					if (!(i_206438 < colontmp__206437)) break L14;
						F.line = 161;
						i_205790 = i_206438;
						if (!(is_whitespace_205671(x_205690.childNodes[i_205790]))) {
						F.line = 162;
						if (idx_205782 != null) { idx_205782.push(i_205790); } else { idx_205782 = [i_205790]; };
						}
						
						F.line = 2651;
						i_206438 = addInt(i_206438, 1);
					}
			} while(false);
		} while(false);
			if (!((idx_205782 != null ? idx_205782.length : 0) == 2)) Tmp15 = false; else {				Tmp15 = (x_205690.childNodes[idx_205782[chckIndx(1, 0, idx_205782.length+0-1)-0]].nodeName == "UL");			}		if (Tmp15) {
		F.line = 164;
		var e_205821 = {heading: x_205690.childNodes[idx_205782[chckIndx(0, 0, idx_205782.length+0-1)-0]], kids: [], sortId: (father_205691.kids != null ? father_205691.kids.length : 0), doSort: false};
		F.line = 166;
		var it_205822 = x_205690.childNodes[idx_205782[chckIndx(1, 0, idx_205782.length+0-1)-0]];
		L16: do {
			F.line = 167;
			var j_205830 = 0;
			F.line = 2647;
			var colontmp__206443 = 0;
			F.line = 167;
			colontmp__206443 = it_205822.childNodes.length;
			F.line = 2648;
			var i_206444 = 0;
			L17: do {
				F.line = 2649;
					L18: while (true) {
					if (!(i_206444 < colontmp__206443)) break L18;
						F.line = 167;
						j_205830 = i_206444;
						F.line = 168;
						to_toc_205688(it_205822.childNodes[j_205830], e_205821);
						F.line = 2651;
						i_206444 = addInt(i_206444, 1);
					}
			} while(false);
		} while(false);
		F.line = 169;
		if (father_205691.kids != null) { father_205691.kids.push(e_205821); } else { father_205691.kids = [e_205821]; };
		}
		else {
			L19: do {
				F.line = 171;
				var i_205845 = 0;
				F.line = 2647;
				var colontmp__206448 = 0;
				F.line = 171;
				colontmp__206448 = x_205690.childNodes.length;
				F.line = 2648;
				var i_206449 = 0;
				L20: do {
					F.line = 2649;
						L21: while (true) {
						if (!(i_206449 < colontmp__206448)) break L21;
							F.line = 171;
							i_205845 = i_206449;
							F.line = 172;
							to_toc_205688(x_205690.childNodes[i_205845], father_205691);
							F.line = 2651;
							i_206449 = addInt(i_206449, 1);
						}
				} while(false);
			} while(false);
		}
		
		}
		else {
			F.line = 174;
		if (father_205691.kids != null) { father_205691.kids.push({heading: x_205690, kids: [], sortId: (father_205691.kids != null ? father_205691.kids.length : 0), doSort: false}); } else { father_205691.kids = [{heading: x_205690, kids: [], sortId: (father_205691.kids != null ? father_205691.kids.length : 0), doSort: false}]; };
		}
		}}
	framePtr = F.prev;

	
}

function extract_items_205339(x_205341, heading_205342, items_205345, items_205345_Idx) {
			var Tmp1;

	var F={procname:"dochack.extractItems",prev:framePtr,filename:"C:\\Users\\rumpf\\projects\\nim\\tools\\dochack\\dochack.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if ((x_205341 == null)) {
		F.line = 81;
		break BeforeRet;
		}
		
			if (!!((x_205341.heading == null))) Tmp1 = false; else {				Tmp1 = (x_205341.heading.textContent == heading_205342);			}		if (Tmp1) {
		L2: do {
			F.line = 83;
			var i_205374 = 0;
			F.line = 2647;
			var colontmp__206473 = 0;
			F.line = 83;
			colontmp__206473 = (x_205341.kids != null ? x_205341.kids.length : 0);
			F.line = 2648;
			var i_206474 = 0;
			L3: do {
				F.line = 2649;
					L4: while (true) {
					if (!(i_206474 < colontmp__206473)) break L4;
						F.line = 83;
						i_205374 = i_206474;
						F.line = 84;
						if (items_205345[items_205345_Idx] != null) { items_205345[items_205345_Idx].push(x_205341.kids[chckIndx(i_205374, 0, x_205341.kids.length+0-1)-0].heading); } else { items_205345[items_205345_Idx] = [x_205341.kids[chckIndx(i_205374, 0, x_205341.kids.length+0-1)-0].heading]; };
						F.line = 2651;
						i_206474 = addInt(i_206474, 1);
					}
			} while(false);
		} while(false);
		}
		else {
			L5: do {
				F.line = 86;
				var i_205394 = 0;
				F.line = 2647;
				var colontmp__206478 = 0;
				F.line = 86;
				colontmp__206478 = (x_205341.kids != null ? x_205341.kids.length : 0);
				F.line = 2648;
				var i_206479 = 0;
				L6: do {
					F.line = 2649;
						L7: while (true) {
						if (!(i_206479 < colontmp__206478)) break L7;
							F.line = 86;
							i_205394 = i_206479;
							F.line = 87;
							var it_205395 = x_205341.kids[chckIndx(i_205394, 0, x_205341.kids.length+0-1)-0];
							F.line = 88;
							extract_items_205339(it_205395, heading_205342, items_205345, items_205345_Idx);
							F.line = 2651;
							i_206479 = addInt(i_206479, 1);
						}
				} while(false);
			} while(false);
		}
		
	} while (false);
	framePtr = F.prev;

	
}

function tree_205020(tag_205022, kids_205024) {
	var result_205025 = null;

	var F={procname:"dochack.tree",prev:framePtr,filename:"C:\\Users\\rumpf\\projects\\nim\\tools\\dochack\\dochack.nim",line:0};
	framePtr = F;
		F.line = 11;
		result_205025 = document.createElement(toJSStr(tag_205022));
		L1: do {
			F.line = 12;
			var k_205056 = null;
			F.line = 3;
			var i_206496 = 0;
			L2: do {
				F.line = 4;
					L3: while (true) {
					if (!(i_206496 < (kids_205024 != null ? kids_205024.length : 0))) break L3;
						F.line = 12;
						k_205056 = kids_205024[chckIndx(i_206496, 0, kids_205024.length+0-1)-0];
						F.line = 13;
						result_205025.appendChild(k_205056);
						F.line = 6;
						i_206496 = addInt(i_206496, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_205025;

}

function text_205152(s_205154) {
	var result_205155 = null;

	var F={procname:"dochack.text",prev:framePtr,filename:"C:\\Users\\rumpf\\projects\\nim\\tools\\dochack\\dochack.nim",line:0};
	framePtr = F;
		F.line = 27;
		result_205155 = document.createTextNode(s_205154);
	framePtr = F.prev;

	return result_205155;

}

function sys_fatal_56862(message_56866) {
	var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"C:\\Users\\rumpf\\projects\\nim\\lib\\system\\fatal.nim",line:0};
	framePtr = F;
		F.line = 34;
		var e_57007 = null;
		F.line = 37;
		e_57007 = {m_type: NTI46650, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		F.line = 38;
		e_57007.message = nimCopy(null, message_56866, NTI43040);
		F.line = 39;
		raiseException(e_57007, "AssertionError");
	framePtr = F.prev;

	
}

function raise_assert_56858(msg_56860) {
	var F={procname:"assertions.raiseAssert",prev:framePtr,filename:"C:\\Users\\rumpf\\projects\\nim\\lib\\system\\assertions.nim",line:0};
	framePtr = F;
		F.line = 20;
		sys_fatal_56862(msg_56860);
	framePtr = F.prev;

	
}

function failed_assert_impl_57055(msg_57057) {
	var F={procname:"assertions.failedAssertImpl",prev:framePtr,filename:"C:\\Users\\rumpf\\projects\\nim\\lib\\system\\assertions.nim",line:0};
	framePtr = F;
		F.line = 27;
		raise_assert_56858(msg_57057);
	framePtr = F.prev;

	
}

function uncovered_205940(x_205942) {
			var Tmp1;
		var Tmp2;

	var result_205943 = null;

	var F={procname:"dochack.uncovered",prev:framePtr,filename:"C:\\Users\\rumpf\\projects\\nim\\tools\\dochack\\dochack.nim",line:0};
	framePtr = F;
	BeforeRet: do {
			if (!((x_205942.kids != null ? x_205942.kids.length : 0) == 0)) Tmp1 = false; else {				Tmp1 = !((x_205942.heading == null));			}		if (Tmp1) {
		F.line = 194;
		if (!(x_205942.heading.hasOwnProperty('__karaxMarker__'))) {
		Tmp2 = x_205942;
		}
		else {
		Tmp2 = null;
		}
		
		result_205943 = Tmp2;
		break BeforeRet;
		}
		
		F.line = 195;
		result_205943 = {heading: x_205942.heading, kids: [], sortId: x_205942.sortId, doSort: x_205942.doSort};
		L3: do {
			F.line = 197;
			var i_205982 = 0;
			F.line = 2647;
			var colontmp__206508 = 0;
			F.line = 197;
			colontmp__206508 = (x_205942.kids != null ? x_205942.kids.length : 0);
			F.line = 2648;
			var i_206509 = 0;
			L4: do {
				F.line = 2649;
					L5: while (true) {
					if (!(i_206509 < colontmp__206508)) break L5;
						F.line = 197;
						i_205982 = i_206509;
						F.line = 198;
						var y_205983 = uncovered_205940(x_205942.kids[chckIndx(i_205982, 0, x_205942.kids.length+0-1)-0]);
						if (!((y_205983 == null))) {
						F.line = 199;
						if (result_205943.kids != null) { result_205943.kids.push(y_205983); } else { result_205943.kids = [y_205983]; };
						}
						
						F.line = 2651;
						i_206509 = addInt(i_206509, 1);
					}
			} while(false);
		} while(false);
		if (((result_205943.kids != null ? result_205943.kids.length : 0) == 0)) {
		F.line = 200;
		result_205943 = null;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_205943;

}

function merge_tocs_206017(orig_206019, news_206020) {
	var result_206021 = null;

	var F={procname:"dochack.mergeTocs",prev:framePtr,filename:"C:\\Users\\rumpf\\projects\\nim\\tools\\dochack\\dochack.nim",line:0};
	framePtr = F;
		F.line = 203;
		result_206021 = uncovered_205940(orig_206019);
		if ((result_206021 == null)) {
		F.line = 205;
		result_206021 = news_206020;
		}
		else {
			L1: do {
				F.line = 207;
				var i_206042 = 0;
				F.line = 2647;
				var colontmp__206502 = 0;
				F.line = 207;
				colontmp__206502 = (news_206020.kids != null ? news_206020.kids.length : 0);
				F.line = 2648;
				var i_206503 = 0;
				L2: do {
					F.line = 2649;
						L3: while (true) {
						if (!(i_206503 < colontmp__206502)) break L3;
							F.line = 207;
							i_206042 = i_206503;
							F.line = 208;
							if (result_206021.kids != null) { result_206021.kids.push(news_206020.kids[chckIndx(i_206042, 0, news_206020.kids.length+0-1)-0]); } else { result_206021.kids = [news_206020.kids[chckIndx(i_206042, 0, news_206020.kids.length+0-1)-0]]; };
							F.line = 2651;
							i_206503 = addInt(i_206503, 1);
						}
				} while(false);
			} while(false);
		}
		
	framePtr = F.prev;

	return result_206021;

}

function build_toc_206063(orig_206065, types_206067, procs_206068) {
	var result_206069 = null;

	var F={procname:"dochack.buildToc",prev:framePtr,filename:"C:\\Users\\rumpf\\projects\\nim\\tools\\dochack\\dochack.nim",line:0};
	framePtr = F;
		F.line = 211;
		var new_stuff_206083 = {heading: null, kids: [], doSort: true, sortId: 0};
		L1: do {
			F.line = 212;
			var t_206214 = null;
			F.line = 185;
			var i_206491 = 0;
			F.line = 186;
			var l_206492 = (types_206067 != null ? types_206067.length : 0);
			L2: do {
				F.line = 187;
					L3: while (true) {
					if (!(i_206491 < l_206492)) break L3;
						F.line = 212;
						t_206214 = types_206067[chckIndx(i_206491, 0, types_206067.length+0-1)-0];
						F.line = 213;
						var c_206228 = {heading: t_206214.cloneNode(true), kids: [], doSort: true, sortId: 0};
						F.line = 214;
						t_206214.__karaxMarker__ = true;
						L4: do {
							F.line = 215;
							var p_206235 = null;
							F.line = 185;
							var i_206488 = 0;
							F.line = 186;
							var l_206489 = (procs_206068 != null ? procs_206068.length : 0);
							L5: do {
								F.line = 187;
									L6: while (true) {
									if (!(i_206488 < l_206489)) break L6;
										F.line = 215;
										p_206235 = procs_206068[chckIndx(i_206488, 0, procs_206068.length+0-1)-0];
										if (!(p_206235.hasOwnProperty('__karaxMarker__'))) {
										F.line = 217;
										var xx_206236 = p_206235.parentNode.getElementsByClassName("attachedType");
										if ((((xx_206236 != null ? xx_206236.length : 0) == 1) && (xx_206236[chckIndx(0, 0, xx_206236.length+0-1)-0].textContent == t_206214.textContent))) {
										F.line = 220;
										var q_206244 = tree_205020(makeNimstrLit("A"), [text_205152(p_206235.title)]);
										F.line = 221;
										q_206244.setAttribute("href", p_206235.getAttribute("href"));
										F.line = 222;
										if (c_206228.kids != null) { c_206228.kids.push({heading: q_206244, kids: [], sortId: 0, doSort: false}); } else { c_206228.kids = [{heading: q_206244, kids: [], sortId: 0, doSort: false}]; };
										F.line = 223;
										p_206235.__karaxMarker__ = true;
										}
										
										}
										
										F.line = 189;
										i_206488 = addInt(i_206488, 1);
										if (!(((procs_206068 != null ? procs_206068.length : 0) == l_206489))) {
										F.line = 190;
										failed_assert_impl_57055(makeNimstrLit("C:\\Users\\rumpf\\projects\\nim\\lib\\system\\iterators.nim(190, 11) `len(a) == L` the length of the seq changed while iterating over it"));
										}
										
									}
							} while(false);
						} while(false);
						F.line = 224;
						if (new_stuff_206083.kids != null) { new_stuff_206083.kids.push(c_206228); } else { new_stuff_206083.kids = [c_206228]; };
						F.line = 189;
						i_206491 = addInt(i_206491, 1);
						if (!(((types_206067 != null ? types_206067.length : 0) == l_206492))) {
						F.line = 190;
						failed_assert_impl_57055(makeNimstrLit("C:\\Users\\rumpf\\projects\\nim\\lib\\system\\iterators.nim(190, 11) `len(a) == L` the length of the seq changed while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 225;
		result_206069 = merge_tocs_206017(orig_206065, new_stuff_206083);
	framePtr = F.prev;

	return result_206069;

}

function add_205085(parent_205087, kid_205088) {
			var Tmp1;
				var Tmp2;

	var F={procname:"dochack.add",prev:framePtr,filename:"C:\\Users\\rumpf\\projects\\nim\\tools\\dochack\\dochack.nim",line:0};
	framePtr = F;
			if (!(parent_205087.nodeName == "TR")) Tmp1 = false; else {				if ((kid_205088.nodeName == "TD")) Tmp2 = true; else {					Tmp2 = (kid_205088.nodeName == "TH");				}				Tmp1 = Tmp2;			}		if (Tmp1) {
		F.line = 18;
		var k_205089 = document.createElement("TD");
		F.line = 19;
		k_205089.appendChild(kid_205088);
		F.line = 20;
		parent_205087.appendChild(k_205089);
		}
		else {
			F.line = 22;
		parent_205087.appendChild(kid_205088);
		}
		
	framePtr = F.prev;

	
}

function set_class_205103(e_205105, value_205106) {
	var F={procname:"dochack.setClass",prev:framePtr,filename:"C:\\Users\\rumpf\\projects\\nim\\tools\\dochack\\dochack.nim",line:0};
	framePtr = F;
		F.line = 25;
		e_205105.setAttribute("class", toJSStr(value_205106));
	framePtr = F.prev;

	
}

function to_html_205424(x_205426, is_root_205427) {
			var Tmp1;

		function HEX3Aanonymous_205467(a_205469, b_205470) {
					var Tmp1;

			var result_205471 = 0;

			var F={procname:"toHtml.:anonymous",prev:framePtr,filename:"C:\\Users\\rumpf\\projects\\nim\\tools\\dochack\\dochack.nim",line:0};
			framePtr = F;
			BeforeRet: do {
					if (!!((a_205469.heading == null))) Tmp1 = false; else {						Tmp1 = !((b_205470.heading == null));					}				if (Tmp1) {
				F.line = 106;
				var x_205488 = a_205469.heading.textContent;
				F.line = 107;
				var y_205489 = b_205470.heading.textContent;
				if ((x_205488 < y_205489)) {
				F.line = 108;
				result_205471 = -1;
				break BeforeRet;
				}
				
				if ((y_205489 < x_205488)) {
				F.line = 109;
				result_205471 = 1;
				break BeforeRet;
				}
				
				F.line = 110;
				result_205471 = 0;
				break BeforeRet;
				}
				else {
					F.line = 113;
					result_205471 = subInt(a_205469.sortId, b_205470.sortId);
					break BeforeRet;
				}
				
			} while (false);
			framePtr = F.prev;

			return result_205471;

		}

	var result_205428 = null;

	var F={procname:"dochack.toHtml",prev:framePtr,filename:"C:\\Users\\rumpf\\projects\\nim\\tools\\dochack\\dochack.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if ((x_205426 == null)) {
		F.line = 91;
		result_205428 = null;
		break BeforeRet;
		}
		
		if (((x_205426.kids != null ? x_205426.kids.length : 0) == 0)) {
		if ((x_205426.heading == null)) {
		F.line = 93;
		result_205428 = null;
		break BeforeRet;
		}
		
		F.line = 94;
		result_205428 = x_205426.heading.cloneNode(true);
		break BeforeRet;
		}
		
		F.line = 95;
		result_205428 = tree_205020(makeNimstrLit("DIV"), []);
			if (!!((x_205426.heading == null))) Tmp1 = false; else {				Tmp1 = !(x_205426.heading.hasOwnProperty('__karaxMarker__'));			}		if (Tmp1) {
		F.line = 97;
		add_205085(result_205428, x_205426.heading.cloneNode(true));
		}
		
		F.line = 98;
		var ul_205464 = tree_205020(makeNimstrLit("UL"), []);
		if (is_root_205427) {
		F.line = 100;
		set_class_205103(ul_205464, makeNimstrLit("simple simple-toc"));
		}
		else {
			F.line = 102;
		set_class_205103(ul_205464, makeNimstrLit("simple"));
		}
		
		if (x_205426.doSort) {
		F.line = 104;
		x_205426.kids.sort(HEX3Aanonymous_205467);
		}
		
		L2: do {
			F.line = 115;
			var k_205614 = null;
			F.line = 183;
			var colontmp__206515 = null;
			F.line = 115;
			colontmp__206515 = x_205426.kids;
			F.line = 185;
			var i_206517 = 0;
			F.line = 186;
			var l_206518 = (colontmp__206515 != null ? colontmp__206515.length : 0);
			L3: do {
				F.line = 187;
					L4: while (true) {
					if (!(i_206517 < l_206518)) break L4;
						F.line = 115;
						k_205614 = colontmp__206515[chckIndx(i_206517, 0, colontmp__206515.length+0-1)-0];
						F.line = 116;
						var y_205615 = to_html_205424(k_205614, false);
						if (!((y_205615 == null))) {
						F.line = 118;
						add_205085(ul_205464, tree_205020(makeNimstrLit("LI"), [y_205615]));
						}
						
						F.line = 189;
						i_206517 = addInt(i_206517, 1);
						if (!(((colontmp__206515 != null ? colontmp__206515.length : 0) == l_206518))) {
						F.line = 190;
						failed_assert_impl_57055(makeNimstrLit("C:\\Users\\rumpf\\projects\\nim\\lib\\system\\iterators.nim(190, 11) `len(a) == L` the length of the seq changed while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if (!((ul_205464.childNodes.length == 0))) {
		F.line = 119;
		add_205085(result_205428, ul_205464);
		}
		
		if ((result_205428.childNodes.length == 0)) {
		F.line = 120;
		result_205428 = null;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_205428;

}

function replace_by_id_205172(id_205174, new_tree_205175) {
	var F={procname:"dochack.replaceById",prev:framePtr,filename:"C:\\Users\\rumpf\\projects\\nim\\tools\\dochack\\dochack.nim",line:0};
	framePtr = F;
		F.line = 32;
		var x_205176 = document.getElementById(id_205174);
		F.line = 33;
		x_205176.parentNode.replaceChild(new_tree_205175, x_205176);
		F.line = 34;
		new_tree_205175.id = id_205174;
	framePtr = F.prev;

	
}

function togglevis_206329(d_206331) {
	var F={procname:"dochack.togglevis",prev:framePtr,filename:"C:\\Users\\rumpf\\projects\\nim\\tools\\dochack\\dochack.nim",line:0};
	framePtr = F;
		F.line = 230;
		    if (d_206331.style.display == 'none')
      d_206331.style.display = 'inline';
    else
      d_206331.style.display = 'none';
  
	framePtr = F.prev;

	
}

function groupBy(value_206347) {
	var F={procname:"dochack.groupBy",prev:framePtr,filename:"C:\\Users\\rumpf\\projects\\nim\\tools\\dochack\\dochack.nim",line:0};
	framePtr = F;
		F.line = 238;
		var toc_206348 = document.getElementById("toc-list");
		if ((alternative_206315[0] == null)) {
		F.line = 240;
		var tt_206367 = {heading: null, kids: [], sortId: 0, doSort: false};
		F.line = 241;
		to_toc_205688(toc_206348, tt_206367);
		F.line = 242;
		tt_206367 = tt_206367.kids[chckIndx(0, 0, tt_206367.kids.length+0-1)-0];
		F.line = 244;
		var types_206382 = [[]];
		F.line = 245;
		var procs_206397 = [[]];
		F.line = 247;
		extract_items_205339(tt_206367, "Types", types_206382, 0);
		F.line = 248;
		extract_items_205339(tt_206367, "Procs", procs_206397, 0);
		F.line = 249;
		extract_items_205339(tt_206367, "Converters", procs_206397, 0);
		F.line = 250;
		extract_items_205339(tt_206367, "Methods", procs_206397, 0);
		F.line = 251;
		extract_items_205339(tt_206367, "Templates", procs_206397, 0);
		F.line = 252;
		extract_items_205339(tt_206367, "Macros", procs_206397, 0);
		F.line = 253;
		extract_items_205339(tt_206367, "Iterators", procs_206397, 0);
		F.line = 255;
		var ntoc_206405 = build_toc_206063(tt_206367, types_206382[0], procs_206397[0]);
		F.line = 256;
		var x_206406 = to_html_205424(ntoc_206405, true);
		F.line = 257;
		alternative_206315[0] = tree_205020(makeNimstrLit("DIV"), [x_206406]);
		}
		
		if ((value_206347 == "type")) {
		F.line = 259;
		replace_by_id_205172("tocRoot", alternative_206315[0]);
		}
		else {
			F.line = 261;
		replace_by_id_205172("tocRoot", tree_205020(makeNimstrLit("DIV"), []));
		}
		
		F.line = 262;
		togglevis_206329(document.getElementById("toc-list"));
	framePtr = F.prev;

	
}
var db_206521 = [null];
var contents_206523 = [null];
var oldtoc_206959 = [null];
var timer_206960 = [null];

function raiseRangeError() {
		var e_64445 = null;
		e_64445 = {m_type: NTI46662, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		e_64445.message = nimCopy(null, makeNimstrLit("value out of range"), NTI43040);
		e_64445.parent = null;
		raiseException(e_64445, "RangeError");

	
}

function nsuToLowerAsciiChar(c_193780) {
	var result_193781 = 0;

	var F={procname:"strutils.toLowerAscii",prev:framePtr,filename:"C:\\Users\\rumpf\\projects\\nim\\lib\\pure\\strutils.nim",line:0};
	framePtr = F;
		if ((ConstSet2[c_193780] != undefined)) {
		F.line = 222;
		result_193781 = chckRange(addInt(c_193780, 32), 0, 255);
		}
		else {
			F.line = 224;
			result_193781 = c_193780;
		}
		
	framePtr = F.prev;

	return result_193781;

}

function fuzzy_match_204070(pattern_204072, str_204073) {
							var Tmp4;
							var Tmp5;
								var Tmp6;

	var result_204077 = {Field0: 0, Field1: false};

	var F={procname:"fuzzysearch.fuzzyMatch",prev:framePtr,filename:"C:\\Users\\rumpf\\projects\\nim\\tools\\dochack\\fuzzysearch.nim",line:0};
	framePtr = F;
		F.line = 37;
		var score_state_204078 = -100;
		F.line = 38;
		var header_matched_204079 = false;
		F.line = 39;
		var unmatched_leading_char_count_204081 = 0;
		F.line = 40;
		var consecutive_match_count_204083 = 0;
		F.line = 41;
		var str_index_204085 = 0;
		F.line = 42;
		var pat_index_204087 = 0;
		F.line = 43;
		var score_204089 = 0;
		L1: do {
			F.line = 49;
				L2: while (true) {
				if (!((str_index_204085 < (str_204073 != null ? str_204073.length : 0)) && (pat_index_204087 < (pattern_204072 != null ? pattern_204072.length : 0)))) break L2;
					L3: do {
						F.line = 51;
						var pattern_char_204095 = nsuToLowerAsciiChar(pattern_204072.charCodeAt(chckIndx(pat_index_204087, 0, pattern_204072.length+0-1)-0));
						F.line = 52;
						var str_char_204096 = nsuToLowerAsciiChar(str_204073.charCodeAt(chckIndx(str_index_204085, 0, str_204073.length+0-1)-0));
						if ((ConstSet3[pattern_char_204095] != undefined)) {
						F.line = 56;
						pat_index_204087 = addInt(pat_index_204087, 1);
						F.line = 57;
						break L3;
						}
						
						if ((ConstSet4[str_char_204096] != undefined)) {
						F.line = 59;
						str_index_204085 = addInt(str_index_204085, 1);
						F.line = 60;
						break L3;
						}
						
						if ((!(header_matched_204079) && (str_char_204096 == 58))) {
						F.line = 65;
						header_matched_204079 = true;
						F.line = 66;
						score_state_204078 = -100;
						F.line = 67;
						score_204089 = Math.trunc(Math.floor((5.0000000000000000e-001 * score_204089)));
						F.line = 68;
						pat_index_204087 = 0;
						F.line = 69;
						str_index_204085 = addInt(str_index_204085, 1);
						F.line = 70;
						break L3;
						}
						
						if ((str_char_204096 == pattern_char_204095)) {
						F.line = 73;
						switch (score_state_204078) {
						case -100:
						case 20:
							F.line = 75;
							score_state_204078 = 10;
							break;
						case 0:
							F.line = 78;
							score_state_204078 = 5;
							F.line = 78;
							score_204089 = addInt(score_204089, score_state_204078);
							break;
						case 10:
						case 5:
							F.line = 81;
							consecutive_match_count_204083 = addInt(consecutive_match_count_204083, 1);
							F.line = 82;
							score_state_204078 = 5;
							F.line = 83;
							score_204089 = addInt(score_204089, mulInt(5, consecutive_match_count_204083));
							if ((score_state_204078 == 10)) {
							F.line = 86;
							score_204089 = addInt(score_204089, 10);
							}
							
							F.line = 88;
							var on_boundary_204171 = (pat_index_204087 == (pattern_204072 != null ? (pattern_204072.length-1) : -1));
							if ((!(on_boundary_204171) && (str_index_204085 < (str_204073 != null ? (str_204073.length-1) : -1)))) {
							F.line = 91;
							var next_pattern_char_204172 = nsuToLowerAsciiChar(pattern_204072.charCodeAt(chckIndx(addInt(pat_index_204087, 1), 0, pattern_204072.length+0-1)-0));
							F.line = 92;
							var next_str_char_204173 = nsuToLowerAsciiChar(str_204073.charCodeAt(chckIndx(addInt(str_index_204085, 1), 0, str_204073.length+0-1)-0));
							F.line = 95;
							if (!!((ConstSet5[next_str_char_204173] != undefined))) Tmp4 = false; else {								Tmp4 = !((next_str_char_204173 == next_pattern_char_204172));							}							on_boundary_204171 = Tmp4;
							}
							
							if (on_boundary_204171) {
							F.line = 100;
							score_state_204078 = 20;
							F.line = 100;
							score_204089 = addInt(score_204089, score_state_204078);
							}
							
							break;
						case -1:
						case -3:
							F.line = 103;
							if (!((ConstSet6[str_204073.charCodeAt(chckIndx(subInt(str_index_204085, 1), 0, str_204073.length+0-1)-0)] != undefined))) Tmp5 = true; else {								if (!(ConstSet7[str_204073.charCodeAt(chckIndx(subInt(str_index_204085, 1), 0, str_204073.length+0-1)-0)] != undefined)) Tmp6 = false; else {									Tmp6 = (ConstSet8[str_204073.charCodeAt(chckIndx(str_index_204085, 0, str_204073.length+0-1)-0)] != undefined);								}								Tmp5 = Tmp6;							}							var is_leading_char_204211 = Tmp5;
							if (is_leading_char_204211) {
							F.line = 110;
							score_state_204078 = 10;
							}
							else {
								F.line = 114;
								score_state_204078 = 0;
								F.line = 114;
								score_204089 = addInt(score_204089, score_state_204078);
							}
							
							break;
						}
						F.line = 115;
						pat_index_204087 = addInt(pat_index_204087, 1);
						}
						else {
							F.line = 118;
							switch (score_state_204078) {
							case -100:
								F.line = 120;
								score_state_204078 = -3;
								F.line = 120;
								score_204089 = addInt(score_204089, score_state_204078);
								break;
							case 5:
								F.line = 123;
								score_state_204078 = -1;
								F.line = 123;
								score_204089 = addInt(score_204089, score_state_204078);
								F.line = 124;
								consecutive_match_count_204083 = 0;
								break;
							case -3:
								if ((unmatched_leading_char_count_204081 < 3)) {
								F.line = 128;
								score_state_204078 = -3;
								F.line = 128;
								score_204089 = addInt(score_204089, score_state_204078);
								}
								
								F.line = 129;
								unmatched_leading_char_count_204081 = addInt(unmatched_leading_char_count_204081, 1);
								break;
							default: 
								F.line = 132;
								score_state_204078 = -1;
								F.line = 132;
								score_204089 = addInt(score_204089, score_state_204078);
								break;
							}
						}
						
						F.line = 134;
						str_index_204085 = addInt(str_index_204085, 1);
					} while(false);
				}
		} while(false);
		F.line = 137;
		var colontmp__207063 = nimMax(0, score_204089);
		F.line = 138;
		var colontmp__207064 = (0 < score_204089);
		F.line = 136;
		nimCopy(result_204077, {Field0: colontmp__207063, Field1: colontmp__207064}, NTI204074);
	framePtr = F.prev;

	return result_204077;

}

function text_205120(s_205122) {
	var result_205123 = null;

	var F={procname:"dochack.text",prev:framePtr,filename:"C:\\Users\\rumpf\\projects\\nim\\tools\\dochack\\dochack.nim",line:0};
	framePtr = F;
		F.line = 26;
		result_205123 = document.createTextNode(toJSStr(s_205122));
	framePtr = F.prev;

	return result_205123;

}

function dosearch_206555(value_206557) {

		function HEX3Aanonymous_206871(a_206880, b_206881) {
			var result_206885 = 0;

			var F={procname:"dosearch.:anonymous",prev:framePtr,filename:"C:\\Users\\rumpf\\projects\\nim\\tools\\dochack\\dochack.nim",line:0};
			framePtr = F;
				F.line = 305;
				result_206885 = subInt(b_206881["Field1"], a_206880["Field1"]);
			framePtr = F.prev;

			return result_206885;

		}

	var result_206558 = null;

	var F={procname:"dochack.dosearch",prev:framePtr,filename:"C:\\Users\\rumpf\\projects\\nim\\tools\\dochack\\dochack.nim",line:0};
	framePtr = F;
		if (((db_206521[0] != null ? db_206521[0].length : 0) == 0)) {
		F.line = 272;
		var stuff_206564 = null;
		F.line = 273;
		    var request = new XMLHttpRequest();
    request.open("GET", "theindex.html", false);
    request.send(null);

    var doc = document.implementation.createHTMLDocument("theindex");
    doc.documentElement.innerHTML = request.responseText;

    //parser=new DOMParser();
    //doc=parser.parseFromString("<html></html>", "text/html");

    stuff_206564 = doc.documentElement;
    
		F.line = 286;
		db_206521[0] = nimCopy(null, stuff_206564.getElementsByClassName("reference"), NTI86305);
		F.line = 287;
		contents_206523[0] = nimCopy(null, [], NTI206577);
		L1: do {
			F.line = 288;
			var ahref_206814 = null;
			F.line = 185;
			var i_207043 = 0;
			F.line = 186;
			var l_207044 = (db_206521[0] != null ? db_206521[0].length : 0);
			L2: do {
				F.line = 187;
					L3: while (true) {
					if (!(i_207043 < l_207044)) break L3;
						F.line = 288;
						ahref_206814 = db_206521[0][chckIndx(i_207043, 0, db_206521[0].length+0-1)-0];
						F.line = 289;
						if (contents_206523[0] != null) { contents_206523[0].push(ahref_206814.getAttribute("data-doc-search-tag")); } else { contents_206523[0] = [ahref_206814.getAttribute("data-doc-search-tag")]; };
						F.line = 189;
						i_207043 = addInt(i_207043, 1);
						if (!(((db_206521[0] != null ? db_206521[0].length : 0) == l_207044))) {
						F.line = 190;
						failed_assert_impl_57055(makeNimstrLit("C:\\Users\\rumpf\\projects\\nim\\lib\\system\\iterators.nim(190, 11) `len(a) == L` the length of the seq changed while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		}
		
		F.line = 290;
		var ul_206825 = tree_205020(makeNimstrLit("UL"), []);
		F.line = 291;
		result_206558 = tree_205020(makeNimstrLit("DIV"), []);
		F.line = 292;
		set_class_205103(result_206558, makeNimstrLit("search_results"));
		F.line = 293;
		var matches_206844 = [];
		L4: do {
			F.line = 294;
			var i_206857 = 0;
			F.line = 2647;
			var colontmp__207050 = 0;
			F.line = 294;
			colontmp__207050 = (db_206521[0] != null ? db_206521[0].length : 0);
			F.line = 2648;
			var i_207051 = 0;
			L5: do {
				F.line = 2649;
					L6: while (true) {
					if (!(i_207051 < colontmp__207050)) break L6;
						F.line = 294;
						i_206857 = i_207051;
						L7: do {
							F.line = 295;
							var c_206858 = contents_206523[0][chckIndx(i_206857, 0, contents_206523[0].length+0-1)-0];
							if (((c_206858 == "Examples") || (c_206858 == "PEG construction"))) {
							F.line = 300;
							break L7;
							}
							
							F.line = 301;
							var colontmp__207060 = {Field0: 0, Field1: false};
							F.line = 301;
							var score_206859 = 0;
							F.line = 301;
							var matched_206860 = false;
							F.line = 301;
							nimCopy(colontmp__207060, fuzzy_match_204070(value_206557, c_206858), NTI204074);
							F.line = 301;
							score_206859 = colontmp__207060["Field0"];
							F.line = 301;
							matched_206860 = colontmp__207060["Field1"];
							if (matched_206860) {
							F.line = 303;
							if (matches_206844 != null) { matches_206844.push({Field0: db_206521[0][chckIndx(i_206857, 0, db_206521[0].length+0-1)-0], Field1: score_206859}); } else { matches_206844 = [{Field0: db_206521[0][chckIndx(i_206857, 0, db_206521[0].length+0-1)-0], Field1: score_206859}]; };
							}
							
						} while(false);
						F.line = 2651;
						i_207051 = addInt(i_207051, 1);
					}
			} while(false);
		} while(false);
		F.line = 305;
		matches_206844.sort(HEX3Aanonymous_206871);
		L8: do {
			F.line = 306;
			var i_206924 = 0;
			F.line = 2647;
			var colontmp__207056 = 0;
			F.line = 306;
			colontmp__207056 = nimMin((matches_206844 != null ? matches_206844.length : 0), 19);
			F.line = 2648;
			var i_207057 = 0;
			L9: do {
				F.line = 2649;
					L10: while (true) {
					if (!(i_207057 < colontmp__207056)) break L10;
						F.line = 306;
						i_206924 = i_207057;
						F.line = 307;
						matches_206844[chckIndx(i_206924, 0, matches_206844.length+0-1)-0]["Field0"].innerHTML = matches_206844[chckIndx(i_206924, 0, matches_206844.length+0-1)-0]["Field0"].getAttribute("data-doc-search-tag");
						F.line = 308;
						add_205085(ul_206825, tree_205020(makeNimstrLit("LI"), [matches_206844[chckIndx(i_206924, 0, matches_206844.length+0-1)-0]["Field0"]]));
						F.line = 2651;
						i_207057 = addInt(i_207057, 1);
					}
			} while(false);
		} while(false);
		if ((ul_206825.childNodes.length == 0)) {
		F.line = 310;
		add_205085(result_206558, tree_205020(makeNimstrLit("B"), [text_205120(makeNimstrLit("no search results"))]));
		}
		else {
			F.line = 312;
			add_205085(result_206558, tree_205020(makeNimstrLit("B"), [text_205120(makeNimstrLit("search results"))]));
			F.line = 313;
			add_205085(result_206558, ul_206825);
		}
		
	framePtr = F.prev;

	return result_206558;

}

function search() {

		function wrapper_206991() {
			var F={procname:"search.wrapper",prev:framePtr,filename:"C:\\Users\\rumpf\\projects\\nim\\tools\\dochack\\dochack.nim",line:0};
			framePtr = F;
				F.line = 320;
				var elem_206993 = document.getElementById("searchInput");
				F.line = 321;
				var value_206994 = elem_206993.value;
				if (!(((value_206994 != null ? value_206994.length : 0) == 0))) {
				if ((oldtoc_206959[0] == null)) {
				F.line = 324;
				oldtoc_206959[0] = document.getElementById("tocRoot");
				}
				
				F.line = 325;
				var results_207000 = dosearch_206555(value_206994);
				F.line = 326;
				replace_by_id_205172("tocRoot", results_207000);
				}
				else {
				if (!((oldtoc_206959[0] == null))) {
				F.line = 328;
				replace_by_id_205172("tocRoot", oldtoc_206959[0]);
				}
				}
			framePtr = F.prev;

			
		}

	var F={procname:"dochack.search",prev:framePtr,filename:"C:\\Users\\rumpf\\projects\\nim\\tools\\dochack\\dochack.nim",line:0};
	framePtr = F;
		if (!((timer_206960[0] == null))) {
		F.line = 330;
		clearTimeout(timer_206960[0]);
		}
		
		F.line = 331;
		timer_206960[0] = setTimeout(wrapper_206991, 400);
	framePtr = F.prev;

	
}
